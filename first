#1.1 задача 7

A = list(map(int, input().split()))
n = len(A)
result = [-1] * n 
stack = []

for i in range(n - 1, -1, -1):
    while stack and A[i] >= A[stack[-1]]:
        stack.pop()
    if stack:
        result[i] = A[stack[-1]]
    stack.append(i)

print(" ".join(map(str, result)))


#1.1 задача 8

s = list(map(int, input().split()))
stack = []
block_count = 0

for height in s:

	while stack and stack[-1] > height:
	    stack.pop()

	if not stack or stack[-1] < height:
	    stack.append(height)
	    block_count += 1

print(block_count)


#2.2 задача 1

class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None
        self.prev = None

    def __str__(self):
        return self.val

def main():
    n = int(input())
    first_kid = ListNode(input().split(sep=' ')[1])
    tail_kid = first_kid
    mid_kid = first_kid
    head_kid = first_kid
    kid_count = 1

    for i in range(n - 1):
        a = input()
        if a == '+':
            print(int(head_kid.val))
            head_kid = head_kid.next
            if kid_count % 2 == 0:
                mid_kid = mid_kid.next
            kid_count -= 1
        else:
            b = a.split(sep=' ')
            char, num = b[0], b[1]
            kid = ListNode(num)

            if char == 's':
                kid.prev = tail_kid
                kid.prev.next = kid
                tail_kid = kid
                if (kid_count + 1) % 2 == 1:
                    mid_kid = mid_kid.next
            else:
                kid.prev = mid_kid
                kid.next = mid_kid.next
                try:
                    mid_kid.next.prev = kid
                except:
                    pass
                mid_kid.next = kid
                if kid_count % 2 == 0:
                    mid_kid = mid_kid.next
                if kid.next is None:
                    tail_kid = kid

            kid_count += 1

if __name__ == "__main__":
    main()

#2.2 задача 2

class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None
        self.prev = None

    def __str__(self):
        return self.val

def main():
    n = int(input())
    first_kid = ListNode(input().split(sep=' ')[1])
    tail_kid = first_kid
    mid_kid = first_kid
    head_kid = first_kid
    kid_count = 1

    for _ in range(n - 1):
        a = input()
        if a == '+':
            print(int(head_kid.val))
            head_kid = head_kid.next
            if kid_count % 2 == 0:
                mid_kid = mid_kid.next
            kid_count -= 1
        else:
            b = a.split(sep=' ')
            char, num = b[0], b[1]
            kid = ListNode(num)

            if char == 's':
                kid.prev = tail_kid
                tail_kid.next = kid
                tail_kid = kid
                if (kid_count + 1) % 2 == 1:
                    mid_kid = mid_kid.next
            elif char == 'i':
                kid.prev = mid_kid
                kid.next = mid_kid.next
                if mid_kid.next:
                    mid_kid.next.prev = kid
                mid_kid.next = kid
                if kid_count % 2 == 0:
                    mid_kid = mid_kid.next
                if kid.next is None:
                    tail_kid = kid
            elif char == 'c':
                kid.next = head_kid
                head_kid.prev = kid
                head_kid = kid
                if kid_count % 2 == 1:
                    mid_kid = mid_kid.prev

            kid_count += 1

if __name__ == "__main__":
    main()
